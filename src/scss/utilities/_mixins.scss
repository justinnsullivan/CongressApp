// ==========================================================================
// Mixins
// ==========================================================================
// BEM selectors
@mixin e($element) {
    &__#{$element} {
        @content;
    }
}

@mixin m($modifier) {
    &--#{$modifier} {
        @content;
    }
}

// Media queries
@mixin mq($break) {
    @if $break=="small" {
        @media only screen and (min-width: $brkpoint-sm) and (max-width: $brkpoint-md), only screen and (min-device-width: $brkpoint-sm) and (max-device-width: $brkpoint-md) {
            @content;
        }
    }
    @else if $break=="medium" {
        @media only screen and (min-width: $brkpoint-md + 1) and (max-width: $brkpoint-lg - 1), only screen and (min-device-width: $brkpoint-md + 1) and (max-width: $brkpoint-lg - 1) {
            @content;
        }
    }
    @else if $break=="large" {
        @media only screen and (min-width: $brkpoint-lg), only screen and (min-device-width: $brkpoint-lg) {
            @content;
        }
    }
    @else {
        @error"Whoops! No value could be retrieved for `#{$break}`. ";
    }
}

// Generate modifier color classes
@mixin bg-colors($map) {
    @each $theme,
    $color in $map {
        &--#{$theme} {
            background-color: $color;
        }
    }
}

// Generating :before or :after pseudo-element shapes
@mixin p-el( $el, $el-w: null, $el-h: null) {
    @if $el=="before" or $el=="after" {
        &:#{$el} {
            @extend %pseudos;
            width: $el-w;
            height: $el-h;
            @content;
        }
    }
    @else {
        @error"`#{$el}` is not a valid pseudo-element.";
    }
}

// Image replacement
@mixin img-replace($img, $w, $h, $disp: block) {
    background-image: url('#{$path--rel}/#{$img}');
    background-repeat: no-repeat;
    width: $w;
    height: $h;
    display: $disp;
}

@mixin bg-gradients($map) {
    @each $theme,
    $color in $map {
        &--#{$theme} {
            background: $color;
        }
    }
}

// Grid Columns
@mixin g-columns {
    @for $i from 1 through $g-col-count {
        $context: g-context($g-col-width, $g-col-count, $g-gutter-width) !global;
        $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));
        // Generate column modifier classes
        &--#{$i} {
            width: percentage($target / $context);
        }
    }
}

@mixin prefixed($property,
$value) {
    -webkit-#{$property}: #{$value};
    -moz-#{$property}: #{$value};
    -ms-#{$property}: #{$value};
    -o-#{$property}: #{$value};
    #{$property}: #{$value};
}

@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}

@mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}

@mixin scrollbars($size,
$foreground-color,
$background-color: mix($foreground-color, white, 50%)) {
    ::-webkit-scrollbar {
        width: $size;
        height: $size;
    }
    ::-webkit-scrollbar-thumb {
        background: $foreground-color;
    }
    ::-webkit-scrollbar-track {
        background: $background-color;
    }
    // For Internet Explorer
    body {
        scrollbar-face-color: $foreground-color;
        scrollbar-track-color: $background-color;
    }
}

@mixin visible-pseudo-element($width,
$height) {
    position: absolute;
    display: block;
    content: '';
}

@mixin sweep-right($color) {
    vertical-align: middle;
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    box-shadow: 0 0 1px rgba(0, 0, 0, 0);
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    -moz-osx-font-smoothing: grayscale;
    position: relative;
    -webkit-transition-property: color;
    transition-property: color;
    -webkit-transition-duration: 0.5s;
    transition-duration: 0.5s;
    &:before {
        content: "";
        position: absolute;
        z-index: -1;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: $color;
        -webkit-transform: scaleX(0);
        transform: scaleX(0);
        -webkit-transform-origin: 0 50%;
        transform-origin: 0 50%;
        -webkit-transition-property: transform;
        transition-property: transform;
        -webkit-transition-duration: 0.5s;
        transition-duration: 0.5s;
        -webkit-transition-timing-function: ease-out;
        transition-timing-function: ease-out;
    }
    &.active:before,
    {
        -webkit-transform: scaleX(1);
        transform: scaleX(1);
    }
}
